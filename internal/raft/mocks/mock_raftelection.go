// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xaraphix/Sif/internal/raft (interfaces: RaftElection)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	raft "github.com/xaraphix/Sif/internal/raft"
)

// MockRaftElection is a mock of RaftElection interface.
type MockRaftElection struct {
	ctrl     *gomock.Controller
	recorder *MockRaftElectionMockRecorder
}

// MockRaftElectionMockRecorder is the mock recorder for MockRaftElection.
type MockRaftElectionMockRecorder struct {
	mock *MockRaftElection
}

// NewMockRaftElection creates a new mock instance.
func NewMockRaftElection(ctrl *gomock.Controller) *MockRaftElection {
	mock := &MockRaftElection{ctrl: ctrl}
	mock.recorder = &MockRaftElectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftElection) EXPECT() *MockRaftElectionMockRecorder {
	return m.recorder
}

// GenerateVoteRequest mocks base method.
func (m *MockRaftElection) GenerateVoteRequest(arg0 *raft.RaftNode) raft.VoteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVoteRequest", arg0)
	ret0, _ := ret[0].(raft.VoteRequest)
	return ret0
}

// GenerateVoteRequest indicates an expected call of GenerateVoteRequest.
func (mr *MockRaftElectionMockRecorder) GenerateVoteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVoteRequest", reflect.TypeOf((*MockRaftElection)(nil).GenerateVoteRequest), arg0)
}

// GetResponseForVoteRequest mocks base method.
func (m *MockRaftElection) GetResponseForVoteRequest(arg0 *raft.RaftNode, arg1 raft.VoteRequest) raft.VoteResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseForVoteRequest", arg0, arg1)
	ret0, _ := ret[0].(raft.VoteResponse)
	return ret0
}

// GetResponseForVoteRequest indicates an expected call of GetResponseForVoteRequest.
func (mr *MockRaftElectionMockRecorder) GetResponseForVoteRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseForVoteRequest", reflect.TypeOf((*MockRaftElection)(nil).GetResponseForVoteRequest), arg0, arg1)
}

// HasElectionTimerStarted mocks base method.
func (m *MockRaftElection) HasElectionTimerStarted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasElectionTimerStarted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasElectionTimerStarted indicates an expected call of HasElectionTimerStarted.
func (mr *MockRaftElectionMockRecorder) HasElectionTimerStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasElectionTimerStarted", reflect.TypeOf((*MockRaftElection)(nil).HasElectionTimerStarted))
}

// HasElectionTimerStopped mocks base method.
func (m *MockRaftElection) HasElectionTimerStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasElectionTimerStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasElectionTimerStopped indicates an expected call of HasElectionTimerStopped.
func (mr *MockRaftElectionMockRecorder) HasElectionTimerStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasElectionTimerStopped", reflect.TypeOf((*MockRaftElection)(nil).HasElectionTimerStopped))
}

// RequestVotes mocks base method.
func (m *MockRaftElection) RequestVotes(arg0 *raft.RaftNode, arg1 chan raft.ElectionUpdates) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestVotes", arg0, arg1)
}

// RequestVotes indicates an expected call of RequestVotes.
func (mr *MockRaftElectionMockRecorder) RequestVotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVotes", reflect.TypeOf((*MockRaftElection)(nil).RequestVotes), arg0, arg1)
}

// StartElection mocks base method.
func (m *MockRaftElection) StartElection(arg0 *raft.RaftNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartElection", arg0)
}

// StartElection indicates an expected call of StartElection.
func (mr *MockRaftElectionMockRecorder) StartElection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartElection", reflect.TypeOf((*MockRaftElection)(nil).StartElection), arg0)
}

// StopElection mocks base method.
func (m *MockRaftElection) StopElection(arg0 *raft.RaftNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopElection", arg0)
}

// StopElection indicates an expected call of StopElection.
func (mr *MockRaftElectionMockRecorder) StopElection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopElection", reflect.TypeOf((*MockRaftElection)(nil).StopElection), arg0)
}
