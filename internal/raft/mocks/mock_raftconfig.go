// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xaraphix/Sif/internal/raft (interfaces: RaftConfig)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	raft "github.com/xaraphix/Sif/internal/raft"
)

// MockRaftConfig is a mock of RaftConfig interface.
type MockRaftConfig struct {
	ctrl     *gomock.Controller
	recorder *MockRaftConfigMockRecorder
}

// MockRaftConfigMockRecorder is the mock recorder for MockRaftConfig.
type MockRaftConfigMockRecorder struct {
	mock *MockRaftConfig
}

// NewMockRaftConfig creates a new mock instance.
func NewMockRaftConfig(ctrl *gomock.Controller) *MockRaftConfig {
	mock := &MockRaftConfig{ctrl: ctrl}
	mock.recorder = &MockRaftConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftConfig) EXPECT() *MockRaftConfigMockRecorder {
	return m.recorder
}

// DidNodeCrash mocks base method.
func (m *MockRaftConfig) DidNodeCrash() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DidNodeCrash")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DidNodeCrash indicates an expected call of DidNodeCrash.
func (mr *MockRaftConfigMockRecorder) DidNodeCrash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DidNodeCrash", reflect.TypeOf((*MockRaftConfig)(nil).DidNodeCrash))
}

// InstanceDirPath mocks base method.
func (m *MockRaftConfig) InstanceDirPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceDirPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstanceDirPath indicates an expected call of InstanceDirPath.
func (mr *MockRaftConfigMockRecorder) InstanceDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceDirPath", reflect.TypeOf((*MockRaftConfig)(nil).InstanceDirPath))
}

// InstanceId mocks base method.
func (m *MockRaftConfig) InstanceId() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceId")
	ret0, _ := ret[0].(int32)
	return ret0
}

// InstanceId indicates an expected call of InstanceId.
func (mr *MockRaftConfigMockRecorder) InstanceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceId", reflect.TypeOf((*MockRaftConfig)(nil).InstanceId))
}

// InstanceName mocks base method.
func (m *MockRaftConfig) InstanceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstanceName indicates an expected call of InstanceName.
func (mr *MockRaftConfigMockRecorder) InstanceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceName", reflect.TypeOf((*MockRaftConfig)(nil).InstanceName))
}

// LoadConfig mocks base method.
func (m *MockRaftConfig) LoadConfig() raft.RaftConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig")
	ret0, _ := ret[0].(raft.RaftConfig)
	return ret0
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockRaftConfigMockRecorder) LoadConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockRaftConfig)(nil).LoadConfig))
}

// Peers mocks base method.
func (m *MockRaftConfig) Peers() []raft.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].([]raft.Peer)
	return ret0
}

// Peers indicates an expected call of Peers.
func (mr *MockRaftConfigMockRecorder) Peers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockRaftConfig)(nil).Peers))
}

// Version mocks base method.
func (m *MockRaftConfig) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockRaftConfigMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockRaftConfig)(nil).Version))
}
