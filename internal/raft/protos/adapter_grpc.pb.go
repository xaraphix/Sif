// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftClient interface {
	RequestVoteFromPeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	ReplicateLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	BroadcastMessage(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*BroadcastMessageResponse, error)
	GetRaftInfo(ctx context.Context, in *RaftInfoRequest, opts ...grpc.CallOption) (*RaftInfoResponse, error)
}

type raftClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftClient(cc grpc.ClientConnInterface) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVoteFromPeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/Raft/RequestVoteFromPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) ReplicateLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/Raft/ReplicateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) BroadcastMessage(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*BroadcastMessageResponse, error) {
	out := new(BroadcastMessageResponse)
	err := c.cc.Invoke(ctx, "/Raft/BroadcastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) GetRaftInfo(ctx context.Context, in *RaftInfoRequest, opts ...grpc.CallOption) (*RaftInfoResponse, error) {
	out := new(RaftInfoResponse)
	err := c.cc.Invoke(ctx, "/Raft/GetRaftInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
// All implementations must embed UnimplementedRaftServer
// for forward compatibility
type RaftServer interface {
	RequestVoteFromPeer(context.Context, *VoteRequest) (*VoteResponse, error)
	ReplicateLog(context.Context, *LogRequest) (*LogResponse, error)
	BroadcastMessage(context.Context, *structpb.Struct) (*BroadcastMessageResponse, error)
	GetRaftInfo(context.Context, *RaftInfoRequest) (*RaftInfoResponse, error)
	mustEmbedUnimplementedRaftServer()
}

// UnimplementedRaftServer must be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (UnimplementedRaftServer) RequestVoteFromPeer(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVoteFromPeer not implemented")
}
func (UnimplementedRaftServer) ReplicateLog(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateLog not implemented")
}
func (UnimplementedRaftServer) BroadcastMessage(context.Context, *structpb.Struct) (*BroadcastMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedRaftServer) GetRaftInfo(context.Context, *RaftInfoRequest) (*RaftInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaftInfo not implemented")
}
func (UnimplementedRaftServer) mustEmbedUnimplementedRaftServer() {}

// UnsafeRaftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftServer will
// result in compilation errors.
type UnsafeRaftServer interface {
	mustEmbedUnimplementedRaftServer()
}

func RegisterRaftServer(s grpc.ServiceRegistrar, srv RaftServer) {
	s.RegisterService(&Raft_ServiceDesc, srv)
}

func _Raft_RequestVoteFromPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVoteFromPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Raft/RequestVoteFromPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVoteFromPeer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_ReplicateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).ReplicateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Raft/ReplicateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).ReplicateLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Raft/BroadcastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).BroadcastMessage(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_GetRaftInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).GetRaftInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Raft/GetRaftInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).GetRaftInfo(ctx, req.(*RaftInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Raft_ServiceDesc is the grpc.ServiceDesc for Raft service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Raft_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVoteFromPeer",
			Handler:    _Raft_RequestVoteFromPeer_Handler,
		},
		{
			MethodName: "ReplicateLog",
			Handler:    _Raft_ReplicateLog_Handler,
		},
		{
			MethodName: "BroadcastMessage",
			Handler:    _Raft_BroadcastMessage_Handler,
		},
		{
			MethodName: "GetRaftInfo",
			Handler:    _Raft_GetRaftInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/raft/protos/adapter.proto",
}
