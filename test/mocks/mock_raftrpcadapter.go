// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xaraphix/Sif/internal/raft (interfaces: RaftRPCAdapter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	raft "github.com/xaraphix/Sif/internal/raft"
	protos "github.com/xaraphix/Sif/internal/raft/protos"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// MockRaftRPCAdapter is a mock of RaftRPCAdapter interface.
type MockRaftRPCAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockRaftRPCAdapterMockRecorder
}

// MockRaftRPCAdapterMockRecorder is the mock recorder for MockRaftRPCAdapter.
type MockRaftRPCAdapterMockRecorder struct {
	mock *MockRaftRPCAdapter
}

// NewMockRaftRPCAdapter creates a new mock instance.
func NewMockRaftRPCAdapter(ctrl *gomock.Controller) *MockRaftRPCAdapter {
	mock := &MockRaftRPCAdapter{ctrl: ctrl}
	mock.recorder = &MockRaftRPCAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftRPCAdapter) EXPECT() *MockRaftRPCAdapterMockRecorder {
	return m.recorder
}

// BroadcastMessage mocks base method.
func (m *MockRaftRPCAdapter) BroadcastMessage(arg0 raft.Peer, arg1 *structpb.Struct) *protos.BroadcastMessageResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastMessage", arg0, arg1)
	ret0, _ := ret[0].(*protos.BroadcastMessageResponse)
	return ret0
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockRaftRPCAdapterMockRecorder) BroadcastMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockRaftRPCAdapter)(nil).BroadcastMessage), arg0, arg1)
}

// GetRaftInfo mocks base method.
func (m *MockRaftRPCAdapter) GetRaftInfo(arg0 raft.Peer, arg1 *protos.RaftInfoRequest) *protos.RaftInfoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaftInfo", arg0, arg1)
	ret0, _ := ret[0].(*protos.RaftInfoResponse)
	return ret0
}

// GetRaftInfo indicates an expected call of GetRaftInfo.
func (mr *MockRaftRPCAdapterMockRecorder) GetRaftInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaftInfo", reflect.TypeOf((*MockRaftRPCAdapter)(nil).GetRaftInfo), arg0, arg1)
}

// ReplicateLog mocks base method.
func (m *MockRaftRPCAdapter) ReplicateLog(arg0 raft.Peer, arg1 *protos.LogRequest) *protos.LogResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicateLog", arg0, arg1)
	ret0, _ := ret[0].(*protos.LogResponse)
	return ret0
}

// ReplicateLog indicates an expected call of ReplicateLog.
func (mr *MockRaftRPCAdapterMockRecorder) ReplicateLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicateLog", reflect.TypeOf((*MockRaftRPCAdapter)(nil).ReplicateLog), arg0, arg1)
}

// RequestVoteFromPeer mocks base method.
func (m *MockRaftRPCAdapter) RequestVoteFromPeer(arg0 raft.Peer, arg1 *protos.VoteRequest) *protos.VoteResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVoteFromPeer", arg0, arg1)
	ret0, _ := ret[0].(*protos.VoteResponse)
	return ret0
}

// RequestVoteFromPeer indicates an expected call of RequestVoteFromPeer.
func (mr *MockRaftRPCAdapterMockRecorder) RequestVoteFromPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVoteFromPeer", reflect.TypeOf((*MockRaftRPCAdapter)(nil).RequestVoteFromPeer), arg0, arg1)
}

// StartAdapter mocks base method.
func (m *MockRaftRPCAdapter) StartAdapter(arg0 *raft.RaftNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartAdapter", arg0)
}

// StartAdapter indicates an expected call of StartAdapter.
func (mr *MockRaftRPCAdapterMockRecorder) StartAdapter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAdapter", reflect.TypeOf((*MockRaftRPCAdapter)(nil).StartAdapter), arg0)
}

// StopAdapter mocks base method.
func (m *MockRaftRPCAdapter) StopAdapter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopAdapter")
}

// StopAdapter indicates an expected call of StopAdapter.
func (mr *MockRaftRPCAdapterMockRecorder) StopAdapter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAdapter", reflect.TypeOf((*MockRaftRPCAdapter)(nil).StopAdapter))
}
