// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xaraphix/Sif/internal/raft (interfaces: RaftLog)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	raft "github.com/xaraphix/Sif/internal/raft"
	protos "github.com/xaraphix/Sif/internal/raft/protos"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// MockRaftLog is a mock of RaftLog interface.
type MockRaftLog struct {
	ctrl     *gomock.Controller
	recorder *MockRaftLogMockRecorder
}

// MockRaftLogMockRecorder is the mock recorder for MockRaftLog.
type MockRaftLogMockRecorder struct {
	mock *MockRaftLog
}

// NewMockRaftLog creates a new mock instance.
func NewMockRaftLog(ctrl *gomock.Controller) *MockRaftLog {
	mock := &MockRaftLog{ctrl: ctrl}
	mock.recorder = &MockRaftLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftLog) EXPECT() *MockRaftLogMockRecorder {
	return m.recorder
}

// GetLog mocks base method.
func (m *MockRaftLog) GetLog(arg0 *raft.RaftNode, arg1 int32) *protos.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLog", arg0, arg1)
	ret0, _ := ret[0].(*protos.Log)
	return ret0
}

// GetLog indicates an expected call of GetLog.
func (mr *MockRaftLogMockRecorder) GetLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockRaftLog)(nil).GetLog), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockRaftLog) GetLogs() []*protos.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]*protos.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockRaftLogMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockRaftLog)(nil).GetLogs))
}

// ReplicateLog mocks base method.
func (m *MockRaftLog) ReplicateLog(arg0 *raft.RaftNode, arg1 raft.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplicateLog", arg0, arg1)
}

// ReplicateLog indicates an expected call of ReplicateLog.
func (mr *MockRaftLogMockRecorder) ReplicateLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicateLog", reflect.TypeOf((*MockRaftLog)(nil).ReplicateLog), arg0, arg1)
}

// RespondToBroadcastMsgRequest mocks base method.
func (m *MockRaftLog) RespondToBroadcastMsgRequest(arg0 *raft.RaftNode, arg1 *structpb.Struct) (*protos.BroadcastMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToBroadcastMsgRequest", arg0, arg1)
	ret0, _ := ret[0].(*protos.BroadcastMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToBroadcastMsgRequest indicates an expected call of RespondToBroadcastMsgRequest.
func (mr *MockRaftLogMockRecorder) RespondToBroadcastMsgRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToBroadcastMsgRequest", reflect.TypeOf((*MockRaftLog)(nil).RespondToBroadcastMsgRequest), arg0, arg1)
}

// RespondToLogReplicationRequest mocks base method.
func (m *MockRaftLog) RespondToLogReplicationRequest(arg0 *raft.RaftNode, arg1 *protos.LogRequest) (*protos.LogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToLogReplicationRequest", arg0, arg1)
	ret0, _ := ret[0].(*protos.LogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToLogReplicationRequest indicates an expected call of RespondToLogReplicationRequest.
func (mr *MockRaftLogMockRecorder) RespondToLogReplicationRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToLogReplicationRequest", reflect.TypeOf((*MockRaftLog)(nil).RespondToLogReplicationRequest), arg0, arg1)
}
